name: berg-app build and push to docker hub
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          docker build -t berg-app:test .
      - name: Run and test container
        run: |
          docker run -d -p 80:80 --name berg-app berg-app:test
          sleep 5
          npm install axios chai mocha -g
          cat << 'EOF' > test.js
          const axios = require("axios");
          const expect = require("chai").expect;
          describe("Tests to the \"/\" endpoint", () => {
              it("should return a 200 status code", async () => {
                  const res = await axios("http://localhost:80/");
                  expect(res.status).to.equal(200);
              });
              it("should return a JSON object with a Message", async () => {
                  const res = await axios("http://localhost:80/");
                  expect(res.data).to.haveOwnProperty("message");
              });
              it("should return a JSON object with a Timestamp", async () => {
                  const res = await axios("http://localhost:80/");
                  expect(res.data).to.haveOwnProperty("timestamp");
              });
              it("should return a Message saying \"My name is ...\"", async () => {
                  const res = await axios("http://localhost:80/");
                  expect(res.data.message).to.contain("My name is");
              });
              it("should return a UNIX style timestamp (numerical values only)", async () => {
                  const res = await axios("http://localhost:80/");
                  expect(res.data.timestamp).to.be.a("number");
              });
              it("should return a timestamp within a few seconds of now", async () => {
                  const res = await axios("http://localhost:80/");
                  const now = Date.now();
                  expect(res.data.timestamp).to.be.within(now - 5000, now);
              });
              it("should return a minified JSON object.", async () => {
                  const res = await axios("http://localhost:80/");
                  expect(JSON.stringify(res.data).length).to.be.lessThan(100);
              });
          });
          EOF
          mocha --reporter spec test.js
          docker stop berg-app
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/berg-app:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/berg-app:latest